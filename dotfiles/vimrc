call plug#begin('~/.vim/plugged')
Plug 'raimondi/delimitmate'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'zchee/deoplete-clang'
Plug 'zchee/deoplete-jedi', { 'for': 'py'}
Plug 'mattn/emmet-vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'vim-scripts/indentpython.vim', { 'for': 'py' }
Plug 'lervag/vimtex', { 'for': 'tex' }
Plug 'tomasr/molokai'
Plug 'benekastah/neomake'
Plug 'rust-lang/rust.vim', { 'for': 'rs' }
Plug 'majutsushi/tagbar', { 'on': 'TagbarOpenAutoClose' }
Plug 'sirver/ultisnips'
Plug 'rhysd/vim-clang-format', { 'on': 'ClangFormat' }
Plug 'scrooloose/nerdcommenter'
Plug 'edkolev/tmuxline.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'nvie/vim-flake8', { 'for': 'py' }
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'reedes/vim-pencil'
Plug 'stephpy/vim-php-cs-fixer'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'ludovicchabant/vim-gutentags'
Plug 'guns/vim-clojure-static'
Plug 'tpope/vim-fireplace'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'lumiliet/vim-twig'
Plug 'snowiow/docon.vim'
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug '~/workspace/filenav.nvim'
call plug#end()

"=> VIM Design
set termguicolors
set background=dark
set number "shows line numbers
syntax enable "set syntax highlighting on
set colorcolumn=80
set lazyredraw "update screen instead of full redraw
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
colorscheme molokai
set guifont=Source\ Code\ Pro\ Semi-Bold\ 11

"Suppress big error messages
if has("patch-7.4.314")
  set shortmess+=c
endif

"=> Plugin Design
"Airline Design
let g:airline_theme='behelit'

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = '☰'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'

let g:airline#extensions#tabline#enabled = 1

"=> VIM Behaviour
set history=100 "saves the last n commands(default 8)
set hidden "allow hidden buffers to exist
filetype plugin indent on
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.lnk,*.aux "Ignore these filetypes
set backspace=indent,eol,start "Make backspace behave in a sane manner.
set nofoldenable "disable folding
set incsearch "highlights every partial match while typing 
set ignorecase "case insensitive search
set smartcase  "Become case sensitive if writing upper case characters
set so=10 "always show 10 lines above or under the cursor while scrolling(default: 0)
set tags=./tags,tags
set cursorline "highlight current line 
set noautochdir "Don't switch working directory to the file currently worked on
autocmd! bufwritepost .vimrc source % "Automatically reload vimrc after edit
set shell=/usr/bin/zsh "Set ZSH as standard shell
set backupdir=~/tmp/
set directory=~/tmp/
set rnu "relative numbers
"The following 4 commands translate tabs to 4 spaces
set smartindent
set tabstop=4
set shiftwidth=4
set softtabstop=4 expandtab

"recognize .phtml template files for zf2
au BufNewFile,BufRead *.phtml set filetype=html syntax=php
au BufNewFile,BufRead *.php_cs set filetype=php syntax=php

function! DoPrettyXML()
  " save the filetype so we can restore it later
  let l:origft = &ft
  set ft=
  " delete the xml header if it exists. This will
  " permit us to surround the document with fake tags
  " without creating invalid xml.
  1s/<?xml .*?>//e
  " insert fake tags around the entire document.
  " This will permit us to pretty-format excerpts of
  " XML that may contain multiple top-level elements.
  0put ='<PrettyXML>'
  $put ='</PrettyXML>'
  silent %!xmllint --format -
  " xmllint will insert an <?xml?> header. it's easy enough to delete
  " if you don't want it.
  " delete the fake tags
  2d
  $d
  " restore the 'normal' indentation, which is one extra level
  " too deep due to the extra tags we wrapped around the document.
  silent %<
  " back to home
  1
  " restore the filetype
  exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()

"=> VIM Plugin Behaviour
"ClangFormat
let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -4,
            \ "AlignAfterOpenBracket" : "true",
            \ "AlignConsecutiveAssignments" : "true",
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "ColumnLimit" : "80",
            \ "Standard" : "C++11",
            \ "BreakBeforeBraces" : "Stroustrup"}

"Docon
let g:docon_browser = 0
let g:docon_behavior = 0

"Deoplete
let g:deoplete#enable_at_startup = 1
autocmd CompleteDone * pclose! "Close Preview window after completion

"DeopleClang
let g:deoplete#sources#clang#libclang_path = '/usr/lib/libclang.so'
let g:deoplete#sources#clang#clang_header = '/usr/lib/clang/'

"FZF
function! s:fzf_statusline()
  highlight fzf1 ctermfg=161 ctermbg=251
  highlight fzf2 ctermfg=23 ctermbg=251
  highlight fzf3 ctermfg=237 ctermbg=251
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

autocmd! User FzfStatusLine call <SID>fzf_statusline()

"Latex-Box
let g:LatexBox_viewer='okular'

"PHP-CS-Fixer
let g:php_cs_fixer_path = "php-cs-fixer"
let g:php_cs_fixer_config_file = '.php_cs'
let g:php_cs_fixer_verbose = 1 
let g:php_cs_fixer_level = "all"

"Pencil
let g:pencil#wrapModeDefault = 'soft' 
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init()
  autocmd FileType text         call pencil#init()
  autocmd FileType tex          call pencil#init()
augroup END
let g:pencil#textwidth = 80
let g:pencil#conceallevel = 0

"Neomake
autocmd! BufWritePost * Neomake
let g:neomake_error_sign = {'text': '✖', 'texthl': 'ErrorMsg'}
let g:neomake_warning_sign = {
         \   'text': '⚠',
         \   'texthl': 'WarningMsg',
\ }
let g:neomake_message_sign = {
          \   'text': '➤',
          \   'texthl': 'ModeMsg',
          \ }
let g:neomake_info_sign = {'text': 'ℹ', 'texthl': 'MoreMsg'}
let g:neomake_php_phpcs_args_standard='PSR2'

function! neomake#makers#ft#php#phpmd()
return {
    \ 'args': ['%:p', 'text', 'cleancode,codesize,design,unusedcode,controversial,naming'],
    \ 'errorformat': '%E%f:%l%\s%m'
    \ }
endfunction

" LATEX
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

"Netrw
let g:netrw_list_hide='.*\.swp$,
                        \.*\.aux$,
                        \.*\.bbl$,
                        \.*\.fdb_latexmk$,
                        \.*\.fls$,
                        \.*\.blg'

"=> Costum Keybindings
let mapleader = "\<Space>"
let maplocalleader = ','
"save file
nnoremap <Leader>w :w<CR>
" close buffer
nnoremap <Leader>q :q<CR>
"OmniComplete
inoremap <C-SPACE> <C-X><C-O>

"switch splits
noremap <a-h> <C-w>h
noremap <a-j> <C-w>j
noremap <a-k> <C-w>k
noremap <a-l> <C-w>l

"copy paste from clipboard
vmap <Leader>y "+y
nmap <Leader>yy "+yy
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

"turn off search results
nnoremap <silent> <leader>r :<C-u>nohlsearch<CR><C-l> 
"switch to previous tab
map <C-h> :tabprevious<CR> 
"switch to next tab
map <C-l> :tabnext<CR> 

"Press to switch between header and implementation in C/C++
map <F4> :e %:p:s,.hpp$,.X123X,:s,.cpp$,.hpp,:s,.X123X$,.cpp,<CR>

"XML Format
autocmd Filetype xml nnoremap <leader>f :PrettyXML<CR>

"=> Plugin Custom Keybindings
"ClangFormat
autocmd Filetype cpp nnoremap <leader>f :ClangFormat<CR>

"Docon
nnoremap <Leader>d :DocOnToggle<CR>

"Deoplete
inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <silent><expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

""FZF
nnoremap <leader>o :Files<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>a :Ag 

"Netrw
map <leader>e :Explore<CR>
augroup netrw_mapping
    autocmd!
    autocmd filetype netrw call NetrwMapping()
augroup END

function! NetrwMapping()
    nmap <buffer> l <CR>
    nmap <buffer> h -
endfunction

map <leader>v :Vex<CR>
map <leader>s :Sex<CR>

"PHP-CS-Fixer
autocmd Filetype php nnoremap <leader>f :call PhpCsFixerFixFile()<CR>

"Vim-Box
nnoremap <Leader>ll :Latexmk<CR>
nnoremap <Leader>lv :LatexView<CR>

"Tagbar
map <F6> :TagbarOpenAutoClose<CR>

"Ultisnips Bindings
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" Activation based on file type
augroup rainbow_lisp
  autocmd!
  autocmd FileType lisp,clojure,scheme RainbowParentheses
augroup END

